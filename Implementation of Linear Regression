# importing the libraries
import numpy as np
import matplotlib.pyplot as plt 
import pandas as pd
import seaborn as sns
from scipy import stats
import statsmodels.api as sm
from statsmodels.stats.outliers_influence import variance_inflation_factor
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn import linear_model
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error
import math

%matplotlib inline

# Loading the csv file into data frame
temp_df=pd.read_csv("C:/Users/alamt/pmsm_temperature_data.csv")
#temp_df=temp_df.drop(["stator_winding","stator_yoke","stator_tooth"], axis=1)
temp_df.head()

# Checking for null values 
display(temp_df.isnull().any())

# Printing out the correlarion matrix
corr=temp_df.corr()
display(corr)

sns.heatmap(corr, xticklabels= corr.columns,  yticklabels= corr.columns, cmap="RdBu")

# Eliminating the Multicolinearity between the features

temp_df_before= temp_df
temp_df_after=temp_df_before.drop(["stator_yoke","stator_tooth","torque","i_q","motor_speed"], axis=1)
X1=sm.tools.add_constant(temp_df_before)
X2=sm.tools.add_constant(temp_df_after)
series_before=pd.Series([variance_inflation_factor(X1.values, i) for i in range(X1.shape[1])], index= X1.columns)
series_after=pd.Series([variance_inflation_factor(X2.values, i) for i in range(X2.shape[1])], index= X2.columns)
print("Data Before")
print("-"*100)
display(series_before)
print("Data After")
print("-"*100)
display(series_after)

# Filtering the Outliers
temp_remove_df=temp_df_after[(np.abs(stats.zscore(temp_df_after))<3).all(axis=1)]
temp_df.index.difference(temp_remove_df.index) 


print(temp_df_after.shape)
print(temp_remove_df.shape)

# Definition of the Input and Output Variable
X = temp_remove_df.drop("pm", axis=1)
Y= temp_remove_df[["pm"]]

# Splitting the data into Test and Train
X_train, X_test, y_train, y_test = train_test_split(X,Y, test_size=0.20, random_state=42)

# Creation of an instance of model and fitting the model
regression_model = LinearRegression()
regression_model.fit(X_train, y_train)

# Seeing the Coefficients and Intercepts
intercept = regression_model.intercept_[0]
coef = regression_model.coef_[0]

print("The intercept for our model is {:.4}".format(intercept))
print("-"*100)

for cf in zip(X.columns, coef):
    print("The coefficient for {} is {:.2}".format(cf[0],cf[1]))
    
# Get the results from the prediction of the model
y_predict= regression_model.predict(X_test)
acc=regression_model.score(X_test,y_test)
print("Accuracy {:.3}".format(acc))

# Evaluating the performance 

MSE=mean_squared_error(y_test, y_predict)
MAE=mean_absolute_error(y_test, y_predict)
RMSE= math.sqrt(MSE)
model_r2=r2_score(y_test, y_predict)

print("Mean Square Error {:.3}".format(MSE))
print("Mean Absolute Error {:.3}".format(MAE))
print("Root Mean Square Error {:.3}".format(RMSE))
print("R2 Score {:.3}".format(model_r2))
