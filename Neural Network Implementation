%tensorflow_version 1.4

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from sklearn.model_selection import train_test_split
import math

from keras.models import Sequential
from keras.layers import Activation
from keras.optimizers import SGD
from keras.layers import Dense, Dropout,BatchNormalization
from keras.regularizers import l2

from google.colab import files
uploaded = files.upload()

import io
df = pd.read_csv(io.BytesIO(uploaded['pmsm_temperature_data.csv']))
df.head()

df.info()

# print all testruns (measurements)
measurement = df.profile_id.unique()
print(measurement)
print("Total number of test runs {0}".format(measurement.size))

#Graph of 'pm' with each set of measurements
columns = ['pm']
measurement_list = np.random.choice(measurement, size=8, replace=False)    
n_c = 2 #Number of columns 
n_g= len(measurement) #Number of graphs
n_r = int(np.ceil(n_g/n_c)) #Number of rows
columnlist = list(df.columns.values) 
plt.figure(figsize=(15,n_r*4))    
with sns.axes_style("whitegrid"):    
    for i in range(0,n_g): 
        plt.subplot(n_r,n_c,i+1) 
        temp = df.loc[df['profile_id'] == measurement[i]]
        temp = temp.loc[:,columns]
        temp = temp.iloc[::100, :]
        ax1= sns.lineplot(data=temp.loc[:,columns],dashes = False, palette=sns.color_palette('Dark2',n_colors=len(columns)))
        ax1.set_title("profile id: {0}".format(measurement[i]))
    plt.show 

# Seperating input and output variables
X = df.drop(['motor_speed','torque','i_q','stator_yoke','stator_tooth','pm','profile_id'], axis = 1).values
y = df['pm'].values
# split up in training and test data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

#Shape of input & output variables
print(X.shape)
print(y.shape)

#Neural Network for Regression
n_epochs=100
size=100
nn = Sequential()
nn.add(Dense(6, input_dim=X_train.shape[1], activation='relu'))
nn.add(Dense(5, activation='relu'))
nn.add(Dense(3, activation='relu'))
nn.add(Dense(1))
nn.compile(loss='mean_squared_error', optimizer='adam',metrics = ['mean_squared_error','accuracy'])
history = nn.fit(X_train, y_train, validation_split=0.1,epochs=n_epochs, batch_size=size, verbose=0).history

#Plot training loss
fig, ax = plt.subplots(figsize = (8,8))
ax.plot(history['loss'],'b', label = 'Train')
ax.plot(history['val_loss'], 'r', label = 'Validation')
ax.set_title('Model Loss')
ax.set_ylabel('Loss (MSE)')
ax.set_xlabel('Iterations')
ax.legend()
plt.show()

#Predictions
y_pred = nn.predict(X_test)

#Evaluation of model
nn_mse = mean_squared_error(y_test, y_pred)
nn_mae = mean_absolute_error(y_test, y_pred)
nn_r2 = r2_score(y_test, y_pred)
print('Mean Square Error: {0}'.format(nn_mse))
print('Mean Absolute Error: {0}'.format(nn_mae))
print('R2 Score: {0}'.format(nn_r2))

# Actual v/s Predicted Values for different measurements
pred_measurement = np.array([6,30,50,68])
output_value = 'pm'
model = nn
with sns.axes_style("whitegrid"):    
    fig, axs = plt.subplots(len(pred_measurement),1,figsize=(20,len(pred_measurement)*5),squeeze=False)   
    for i in range(0,len(pred_measurement)):
        X_plot = df.drop(['motor_speed','torque','i_q','stator_yoke','stator_tooth','pm','profile_id'], axis=1).loc[df['profile_id'] == pred_measurement[i]].values
        y_plot = df.loc[df['profile_id'] == pred_measurement[i],output_value].values 
        y_pred_plot = model.predict(X_plot)
        time = np.linspace(0, y_plot.shape[0],num=y_plot.shape[0])
        axs[i,0].plot(time,y_pred_plot,label='Predicted Values',color='blue',alpha=0.4,linewidth=0.8)
        axs[i,0].plot(time,y_plot,label='Actual Values',color='black',linewidth=1)
        axs[i,0].legend(loc='best')
        axs[i,0].set_title("profile id: {0}".format(pred_measurement[i]))
    plt.show()
